-- Script de inicialización de Oracle Database para FactuMarket S.A.
-- Este script crea los usuarios y esquemas necesarios para los microservicios

-- Crear usuario para el servicio de Clientes
CREATE USER clientes_user IDENTIFIED BY clientes_pass;
GRANT CONNECT, RESOURCE TO clientes_user;
GRANT CREATE SESSION TO clientes_user;
GRANT CREATE TABLE TO clientes_user;
GRANT CREATE SEQUENCE TO clientes_user;
GRANT CREATE TRIGGER TO clientes_user;

-- Crear usuario para el servicio de Facturas
CREATE USER facturas_user IDENTIFIED BY facturas_pass;
GRANT CONNECT, RESOURCE TO facturas_user;
GRANT CREATE SESSION TO facturas_user;
GRANT CREATE TABLE TO facturas_user;
GRANT CREATE SEQUENCE TO facturas_user;
GRANT CREATE TRIGGER TO facturas_user;

-- Crear tabla de clientes
CONNECT clientes_user/clientes_pass;

CREATE TABLE clientes (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(255) NOT NULL,
    identificacion VARCHAR2(50) NOT NULL UNIQUE,
    email VARCHAR2(255) NOT NULL,
    direccion VARCHAR2(500) NOT NULL,
    telefono VARCHAR2(20),
    activo NUMBER(1) DEFAULT 1 NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Crear índices para la tabla clientes
CREATE INDEX idx_clientes_identificacion ON clientes(identificacion);
CREATE INDEX idx_clientes_email ON clientes(email);
CREATE INDEX idx_clientes_activo ON clientes(activo);

-- Crear trigger para actualizar updated_at
CREATE OR REPLACE TRIGGER tr_clientes_updated_at
    BEFORE UPDATE ON clientes
    FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

-- Insertar datos de prueba
INSERT INTO clientes (nombre, identificacion, email, direccion, telefono) VALUES
('Empresa ABC S.A.S', '900123456-1', 'contacto@empresaabc.com', 'Calle 123 #45-67, Bogotá', '3001234567');

INSERT INTO clientes (nombre, identificacion, email, direccion, telefono) VALUES
('Comercial XYZ Ltda', '800987654-3', 'ventas@comercialxyz.com', 'Carrera 45 #78-90, Medellín', '3009876543');

INSERT INTO clientes (nombre, identificacion, email, direccion, telefono) VALUES
('Servicios DEF S.A.', '700555666-7', 'info@serviciosdef.com', 'Avenida 30 #12-34, Cali', '3005556667');

COMMIT;

-- Crear tabla de facturas
CONNECT facturas_user/facturas_pass;

CREATE TABLE facturas (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    cliente_id NUMBER NOT NULL,
    monto NUMBER(18,2) NOT NULL,
    fecha_emision DATE NOT NULL,
    descripcion VARCHAR2(500) NOT NULL,
    numero_factura VARCHAR2(50) NOT NULL UNIQUE,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_actualizacion TIMESTAMP
);

-- Crear índices para la tabla facturas
CREATE INDEX idx_facturas_cliente ON facturas(cliente_id);
CREATE INDEX idx_facturas_fecha ON facturas(fecha_emision);
CREATE INDEX idx_facturas_numero ON facturas(numero_factura);

-- Crear trigger para actualizar fecha_actualizacion
CREATE OR REPLACE TRIGGER tr_facturas_updated_at
    BEFORE UPDATE ON facturas
    FOR EACH ROW
BEGIN
    :NEW.fecha_actualizacion := CURRENT_TIMESTAMP;
END;
/

-- Insertar datos de prueba
INSERT INTO facturas (cliente_id, monto, fecha_emision, descripcion, numero_factura) VALUES
(1, 150000.00, SYSDATE, 'Servicios de consultoría', 'FAC-20240115001');

INSERT INTO facturas (cliente_id, monto, fecha_emision, descripcion, numero_factura) VALUES
(2, 250000.00, SYSDATE, 'Productos varios', 'FAC-20240115002');

INSERT INTO facturas (cliente_id, monto, fecha_emision, descripcion, numero_factura) VALUES
(3, 75000.00, SYSDATE, 'Servicios de mantenimiento', 'FAC-20240115003');

COMMIT;

-- Crear vistas para reportes
CONNECT clientes_user/clientes_pass;

CREATE VIEW v_clientes_activos AS
SELECT id, nombre, identificacion, email, direccion, telefono, created_at
FROM clientes
WHERE activo = 1;

CONNECT facturas_user/facturas_pass;

CREATE VIEW v_facturas_recientes AS
SELECT f.id, f.cliente_id, f.monto, f.fecha_emision, f.descripcion, f.numero_factura, f.fecha_creacion
FROM facturas f
WHERE f.fecha_emision >= SYSDATE - 30;

-- Crear procedimientos almacenados para operaciones comunes
CONNECT clientes_user/clientes_pass;

CREATE OR REPLACE PROCEDURE sp_obtener_cliente_por_identificacion(
    p_identificacion IN VARCHAR2,
    p_cliente OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_cliente FOR
    SELECT id, nombre, identificacion, email, direccion, telefono, activo, created_at, updated_at
    FROM clientes
    WHERE identificacion = p_identificacion;
END;
/

CONNECT facturas_user/facturas_pass;

CREATE OR REPLACE PROCEDURE sp_obtener_facturas_por_cliente(
    p_cliente_id IN NUMBER,
    p_facturas OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_facturas FOR
    SELECT id, cliente_id, monto, fecha_emision, descripcion, numero_factura, fecha_creacion, fecha_actualizacion
    FROM facturas
    WHERE cliente_id = p_cliente_id
    ORDER BY fecha_emision DESC;
END;
/

-- Crear usuarios adicionales para monitoreo y administración
CONNECT sys/OraclePass123 AS SYSDBA;

CREATE USER facturacion_admin IDENTIFIED BY admin_pass;
GRANT CONNECT, RESOURCE TO facturacion_admin;
GRANT SELECT ANY TABLE TO facturacion_admin;
GRANT CREATE SESSION TO facturacion_admin;

-- Otorgar permisos adicionales para monitoreo
GRANT SELECT ON v_$session TO facturacion_admin;
GRANT SELECT ON v_$sqlarea TO facturacion_admin;
GRANT SELECT ON v_$database TO facturacion_admin;

COMMIT;

-- Mensaje de finalización
SELECT 'Base de datos Oracle inicializada correctamente para FactuMarket S.A.' AS mensaje FROM dual;
